import streamlit as st
import pandas as pd
import Search

# Load the DataFrame
df = pd.read_csv("F://IR/Data/Data700.csv")
df.set_index('PMID', inplace=True)

st.set_page_config(page_title = "Search Engine") 
st.title("Scholarly Search Engine")

text_search = st.text_input("Search", "Type Here...")


query = text_search.title()
st.sidebar.success("Select Any Page from here") 


# result = [(32011262, [0.7284841430005419]), (32800297, [0.7272496103673078]), (32704420, [0.7271385021321072]), (34537858, [0.7157824820475406]), (29194052, [0.7124171039210307]), (31818379, [0.7029761563074565]), (32245523, [0.7005206045917988]), (34338485, [0.6948627317284952]), (35924105, [0.6801225351403792]), (30939301, [0.6699874456711173]), (31601480, [0.6643915059991786]), (33290932, [0.6573880958180807]), (35830864, [0.6557381827038056]), (29278737, [0.6490958139545022]), (26572668, [0.6415407470268787]), (36069404, [0.6324581184033297]), (34392886, [0.6244041955756803]), (34518686, [0.6116878473808032]), (32645448, [0.6071375919774414]), (32449232, [0.60453025805439]), (37612141, [0.5970054842484803]), (28230844, [0.5859940251277622]), (12222090, [0.5815598549238582]), (35731335, [0.5776070338785501]), (25186238, [0.5768714119876043]), (9099122, [0.5715011746587141]), (34118113, [0.5698537681905262]), (36203727, [0.5690253391465109]), (30102808, [0.5610122374223621]), (23419844, [0.5599887049878391]), (30642423, [0.557603700795051]), (8994022, [0.5557806491913477]), (36653991, [0.5548975735441332]), (32831584, [0.5528349212718969]), (16212773, [0.5523896441859227]), (34450960, [0.552305818340023]), (31880562, [0.5485928306845158]), (35602613, [0.5472289028955709]), (29150402, [0.5469069728559499]), (16210187, [0.5468038722011513]), (15030612, [0.5449852366447504]), (2243546, [0.5445134483387165]), (36335215, [0.5444265003202033]), (36357376, [0.5428025103991301]), (9929180, [0.5378154918705756]), (34353175, [0.5360466378522488]), (28905891, [0.5301559306462852]), (35334438, [0.5271429630820217]), (26771046, [0.5237350610387297]), (27667741, [0.5189953358204747]), (16212771, [0.5183816690989366]), (30443587, [0.5154802129854108]), (28842777, [0.5145397890775806]), (35668175, [0.5136605853768672]), (25539473, [0.5127684298376075]), (33801334, [0.5127235510777609]), (35538203, [0.512639136275934]), (32226229, [0.5119978614765519]), (36241863, [0.5087515349656574]), (34143742, [0.5076818739234282]), (31784537, [0.5074296641481667]), (33840394, [0.5070070269204384]), (35546191, [0.5056616008137603]), (28707197, [0.505308837433693]), (32225961, [0.5045387614975763]), (33566785, [0.5027913591921449]), (33906082, [0.5015998047006484]), (37420546, [0.5013093471982375]), (35344992, [0.5005262829437446]), (36502144, [0.49641792258546225]), (25726283, [0.49600829281832415]), (27239287, [0.49329085147381146]), (37186522, [0.49199181615576726]), (29314026, [0.49075080449650454]), (33582296, [0.4903241178094755]), (36735956, [0.49022784051554735]), (30638805, [0.4884009506149687]), (25640593, [0.4839305446530058]), (28516919, [0.482454662961036]), (35562535, [0.4789745348957388]), (35473951, [0.4785337976063968]), (37465961, [0.47798167125824076]), (35362349, [0.47735300166860495]), (36180361, [0.4761972459804129]), (35728337, [0.474418232947166]), (31539636, [0.47368907531018456]), (35408176, [0.4711030550913683]), (33276015, [0.47078276946519204]), (33171748, [0.46957704345711027]), (29327483, [0.4639432129394121]), (31557530, [0.4601945473550273]), (37214134, [0.45493152148694493]), (31541534, [0.4304530362812966]), (29316306, [0.4277206922752421]), (26276464, [0.4275929461358603]), (37182346, [0.42473647819105875]), (33569373, [0.41989694354087803]), (8725773, [0.41980415565197116]), (36745940, [0.4075847633247016]), (35417602, [0.4052991718529454])] 
if 'searched' not in st.session_state:
	st.session_state.searched = False
     
if st.button('Search'):
     st.session_state.result = Search.search(query)  
     st.session_state.searched = True

# Pagination
if st.session_state.searched == True:
    items_per_page = 10
    page_number = st.number_input("Page", min_value=1, value=1)
    start_idx = (page_number - 1) * items_per_page
    end_idx = min(len(st.session_state.result), start_idx + items_per_page)

    for i in st.session_state.result[start_idx:end_idx]:
        pmid = i[0]
        title = df.loc[pmid]['Title']
        author = df.loc[pmid]['Authors']
        abstract = df.loc[pmid]['Abstract']
        year = df.loc[pmid]['Year']
        publ = df.loc[pmid]['Journal']
        url = f'https://pubmed.ncbi.nlm.nih.gov/{pmid}'

        # Create clickable URL with title
        st.markdown(f"**[{title}]({url})**")
        st.write(f"Author: {author}")
        st.write(f"Year of Publication: {year}")
        st.write(f"Publisher: {publ}")

        # Display a portion of the abstract
        max_abstract_length = 200  # Adjust this value as needed
        if abstract and len(abstract) > max_abstract_length:
            st.write(abstract[:max_abstract_length] + '...')
        else:
            st.write(abstract)
